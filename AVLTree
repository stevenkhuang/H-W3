public class AVLTree extends BinarySearchTree{

	protected Node add(int data)
	{
		return balance(super.add(data));
	}
	protected Node remove(int data)
	{
		return balance(super.remove(data));
	}
	
	
	private Node balance(Node node)
	{
		if(height(node.left) - height(node.right) > 1)
		{
			if(height(node.left.left) >= height(node.left.right))
			{
				node = singleRightRotation(node);
			}
			else
			{
				node = doubleLeftRightRotation(node);
			}	
		}
		else if (height(node.right) - height(node.left) > 1)
		{
			if(height(node.right.right) >= height(node.right.left))
			{
				node = singleLeftRotation(node);
			}
			else
			{
				node = doubleRightLeftRotation(node);
			}
		}
		
		return node;
	}
	
	private Node singleRightRotation(Node k2)
	{
		Node k1 = k2.left;
		k2.left = k1.right;
		k1.right = k2;
		return k1;
	}
	
	private Node singleLeftRotation(Node k1)
	{
		Node k2 = k1.right;
		k1.right = k2.left;
		k2.left = k1;
		
		return k2;
	}
	
	private Node doubleLeftRightRotation(Node k3)
	{
		k3.left = singleLeftRotation(k3.left);
		return singleRightRotation(k3);
	}
	
	private Node doubleRightLeftRotation(Node k1)
	{
		k1.right = singleRightRotation(k1.right);
		return singleLeftRotation(k1);
	}
	
	int checkBalance(Node node) throws Exception
	{
		if (node == null) 
			return -1;
		if(node != null)
		{
			int leftHeight = checkBalance(node.left);
			int rightHeight = checkBalance(node.right);
			if( (Math.abs(height(node.left) - height(node.right)) > 1) || (height(node.left) != leftHeight) || (height(node.right) != rightHeight))
			{
				throw new Exception("Unbalanced trees");
			}
		}
		
		return height(node);
	}

}
