package HW6;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;


import java.util.ArrayList;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;


import java.util.ArrayList;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;


public class GraphMethods {
	
	public static int numOfVertices;
    static Queue<Vertex> vertices = new LinkedList<Vertex>();
    static Double INFINITY = Double.POSITIVE_INFINITY;
    static int count = 1;
    
	public static void  topologicalSort() {
		 
        Queue<Vertex> q = new LinkedList<Vertex>();
        Queue<Vertex> topoSort = new LinkedList<Vertex>();
        
        int counter = 0;
        for(Vertex m : vertices){
            if(m.inDegree==0){
        
                q.add(m);
                topoSort.add(m);
          ;
            }
        }
        
        while(!q.isEmpty()) {
            Vertex v = q.remove();

            for(Vertex w: v.adjacentVertex){
                if(--w.inDegree == 0){
                	
                    q.add(w);
                    topoSort.add(w);
                    printTopoTable(v.data,w.data);
                    
                             }
            }
            

        }
        System.out.print("Vertices in topological sort: ");
        
        for(Vertex x: topoSort)
	    {
	    	System.out.print(x.data + " ");
	    }
        
    
    }
	
	
	public static void dijkstra(Vertex source)
    {
        source.dist = 0.;
        printWeightedTable();
        PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
         vertexQueue.add(source);

    while (!vertexQueue.isEmpty()) {
        Vertex u = vertexQueue.poll();
        u.known = true;

            // Visit each edge exiting u
            for (Edge e : u.edge)
            {
                Vertex v = e.target;
                double weight = e.weight;
                double distanceThroughU = u.dist + weight;
        if (distanceThroughU < v.dist) 
        {
            vertexQueue.remove(v);

            v.dist = distanceThroughU ;
            v.path = u;
            vertexQueue.add(v);
        }
            }
            printWeightedTable();
    }
        }
	
	public static void prim(Vertex root)
	{
		PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
		vertexQueue.add(root);//add the starting node
		printPrimTable();
		while (!vertexQueue.isEmpty()) 
		{//do while queue is not empty
			Vertex u = vertexQueue.poll();//retrives and remove head of queue
			u.known = true;//set known to true
			double currentweight = 100;//random big value
			Vertex v=null;
			// Visit each edge exiting u
			for (Edge e : u.edge)
			{
				u.path=e.target;
				if(!vertexQueue.contains(e.target)&&e.target.known==false)//adds all adj V to tree
				{
					vertexQueue.add(e.target);//makes sure there are no doubles
				}
				
				//only changes when target is false and weight is less
				if(e.target.known==false && e.weight<currentweight)
				{
				v = e.target;//vertex V is the adj vertex
				currentweight = e.weight;//weight of path
				v.known=true;//set to true so wont visit again later
				}
				
			}
			printPrimTable();
		}
		
		
	}
	private static void printPrimTable() {
		String v = "v";
		String k = "known";
		String d = "d";
		String p = "p";

		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",v,k,d,p);//HEADER BAR
		System.out.println("-----------------------------------------------------------------------------------------------------------");
		for(Vertex a: vertices)
		{
			if(a.path== null)
		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path);
			else
				System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path.data);
		}
		System.out.println();
		
	}
	
	public static void unweighted(Vertex startNode)
	{
		Queue<Vertex> q = new LinkedList<Vertex>();
		
		for(Vertex m : vertices){
            m.dist = INFINITY;
            }
		Vertex s = startNode;
		s.dist = 0;
		printUnweightedTable("Initial State");
		
		q.add(s);
		
		while(!q.isEmpty())
		{
			Vertex v = q.remove();
			
			
			for(Vertex w: v.adjacentVertex)
			{
				if(w.dist == INFINITY)
				{
					w.dist = v.dist + 1;
					w.path = v;
					q.add(w);
				}      
			}
			
			printUnweightedTable("v" + v.data + " Dequeued");
			
		}
        }

	private static void printUnweightedTable(String string) {
		String v = "v";
		String d = "d";
		String p = "p";
		
		System.out.printf("%25s", string);
		System.out.println();
		System.out.printf("%25s"+"%30s"+"%20s\n",v,d,p);//HEADER BAR
		System.out.println("-----------------------------------------------------------------------------------------------------------");
		for(Vertex a: vertices)
		{
			if(a.path== null)
		System.out.printf("%25s"+"%30s"+"%20s\n",a.data,a.dist,a.path);
			else
				System.out.printf("%25s"+"%30s"+"%20s\n",a.data,a.dist,a.path.data);
		}
	
		System.out.println();
		
	}
	
	private static void printWeightedTable() {
		String v = "v";
		String k = "known";
		String d = "d";
		String p = "p";

		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",v,k,d,p);//HEADER BAR
		System.out.println("-----------------------------------------------------------------------------------------------------------");
		for(Vertex a: vertices)
		{
			if(a.path== null)
		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path);
			else
				System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path.data);
		}
		System.out.println();
		
	}
	
	private static void printTopoTable(String enqueue, String dequeue)
	{
		
		String string = "Indegree Before Dequeue # " + count; 
		System.out.printf("%25s", string);
		System.out.println();
		for(Vertex v: vertices)
		System.out.printf("%10s", "v"+v.data + "= "+ v.inDegree);
		System.out.println();
		System.out.printf("%10s","Enqueue: v"+ enqueue);
		System.out.println();
		System.out.printf("%10s","Dequeue: v"+dequeue);
		System.out.println();
		System.out.println("------------------------------------------------------------------------------------------------------------------------------");
		count++;
		
	}
	
	
	}
