package disjointsetsexample;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;


public class GraphMethods {
	
	public static int numOfVertices;
    static Queue<Vertex> vertices = new LinkedList<Vertex>();
    static Double INFINITY = Double.POSITIVE_INFINITY;
    static int count = 1;
    
	public static void  topologicalSort() {
		 
        Queue<Vertex> q = new LinkedList<Vertex>();
        Queue<Vertex> topoSort = new LinkedList<Vertex>();
        
        int counter = 0;
        for(Vertex m : vertices){
            if(m.inDegree==0){
        
                q.add(m);
                topoSort.add(m);
          ;
            }
        }
        
        while(!q.isEmpty()) {
            Vertex v = q.remove();

            for(Vertex w: v.adjacentVertex){
                if(--w.inDegree == 0){
                	
                    q.add(w);
                    topoSort.add(w);
                    printTopoTable(v.data,w.data);
                    
                             }
            }
            

        }
        System.out.print("Vertices in topological sort: ");
        
        for(Vertex x: topoSort)
	    {
	    	System.out.print(x.data + " ");
	    }
        
    
    }
	
	
	public static void dijkstra(Vertex source)
    {
        source.dist = 0.;
        printWeightedTable();
        PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
         vertexQueue.add(source);

    while (!vertexQueue.isEmpty()) {
        Vertex u = vertexQueue.poll();
        u.known = true;

            // Visit each edge exiting u
            for (Edge e : u.edge)
            {
                Vertex v = e.v;
                double weight = e.weight;
                double distanceThroughU = u.dist + weight;
        if (distanceThroughU < v.dist) {
            vertexQueue.remove(v);

            v.dist = distanceThroughU ;
            v.path = u;
            vertexQueue.add(v);
        }
            }
            printWeightedTable();
    }
        }
	
	public static void unweighted(Vertex startNode)
	{
		Queue<Vertex> q = new LinkedList<Vertex>();
		
		for(Vertex m : vertices){
            m.dist = INFINITY;
            }
		Vertex s = startNode;
		s.dist = 0;
		printUnweightedTable("Initial State");
		
		q.add(s);
		
		while(!q.isEmpty())
		{
			Vertex v = q.remove();
			
			
			for(Vertex w: v.adjacentVertex)
			{
				if(w.dist == INFINITY)
				{
					w.dist = v.dist + 1;
					w.path = v;
					q.add(w);
				}      
			}
			
			printUnweightedTable("v" + v.data + " Dequeued");
			
		}
        }
	
	public static void prim(Vertex root)
	{
		PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
		root.dist = 0;
		vertexQueue.add(root);//add the starting node
		printWeightedTable();
		while (!vertexQueue.isEmpty()) 
		{//do while queue is not empty
			Vertex u = vertexQueue.poll();
	        u.known = true;

	            // Visit each edge exiting u
	            for (Edge e : u.edge)
	            {
	                Vertex v = e.v;
	                double weight = e.weight;
	                double distanceThroughU = u.dist + weight;
	        if (distanceThroughU < v.dist) {
	            vertexQueue.remove(v);

	            v.dist = distanceThroughU ;
	            v.path = u;
	            vertexQueue.add(v);
	        }
				
			}
			printWeightedTable();
		}
	}

	ArrayList<Edge> kruskal(Queue<Edge> edges)
	{
		//DisjointSet ds = new DisjointSet(numOfVertices);
		//Queue<Edge> pq = edges;
		ArrayList<Edge> mst = new ArrayList<>();
		
	    while (!edges.isEmpty()) {
	    	//mst.size() != numOfVertices
	    	//System.out.print("Done");
	    	Edge e = edges.poll();
	    	/*for(Edge w: pq)
	    	{
	    		if(w.weight < e.weight)
	    		{
	    			e = w;
	    		}
	    	}
	    	
	    	pq.remove(e);*/
	    	
	        //Edge e = pq.deleteMin();  // Edge e = (u, v)

	    	//System.out.println(e.u.data);
	        Vertex uset = find(e.u);
	        Vertex vset = find(e.v);
			
	        // If in different equivalence classes,
	        // then accept the edge.
		if (!uset.data.equals(vset.data)) {
		    mst.add(e);
		    union(uset, vset);
		}
		else
		{
			System.out.println("Rejected: " + e.u.data + " " + e.v.data + " Weight:" + e.weight);
		}
	    }
		
	    for(Edge k: mst)
	    {
	    	System.out.println(k.u.data + " " + k.v.data + " Weight:" + k.weight);
	    }
	    
	    return mst;
	}
	
	
	public Vertex find(Vertex x)
	{
		if(x.path == null)
		{
			return x;
		}
		else
		{
			return find(x.path);
		}
	}
	
	public void union(Vertex v1, Vertex v2)
	{
		//root2 is deeper
		if(v2.root < v1.root)
		{
			v1.path = v2; // make root2 the new root
		}
		
		//root 1 is the same or deeper
		else {
			if(v1.root == v2.root)
			{
				v1.root--; //update height if same
			}
			
			v2.path = v1;
		}
	}
	private static void printUnweightedTable(String string) {
		String v = "v";
		String d = "d";
		String p = "p";
		
		System.out.printf("%25s", string);
		System.out.println();
		System.out.printf("%25s"+"%30s"+"%20s\n",v,d,p);//HEADER BAR
		System.out.println("-----------------------------------------------------------------------------------------------------------");
		for(Vertex a: vertices)
		{
			if(a.path== null)
		System.out.printf("%25s"+"%30s"+"%20s\n",a.data,a.dist,a.path);
			else
				System.out.printf("%25s"+"%30s"+"%20s\n",a.data,a.dist,a.path.data);
		}
	
		System.out.println();
		
	}
	
	private static void printWeightedTable() {
		String v = "v";
		String k = "known";
		String d = "d";
		String p = "p";

		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",v,k,d,p);//HEADER BAR
		System.out.println("-----------------------------------------------------------------------------------------------------------");
		for(Vertex a: vertices)
		{
			if(a.path== null)
		System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path);
			else
				System.out.printf("%25s"+"%20s"+"%30s"+"%20s\n",a.data,a.known,a.dist,a.path.data);
		}
		System.out.println();
		
	}
	
	private static void printTopoTable(String enqueue, String dequeue)
	{
		
		String string = "Indegree Before Dequeue # " + count; 
		System.out.printf("%25s", string);
		System.out.println();
		for(Vertex v: vertices)
		System.out.printf("%10s", "v"+v.data + "= "+ v.inDegree);
		System.out.println();
		System.out.printf("%10s","Enqueue: v"+ enqueue);
		System.out.println();
		System.out.printf("%10s","Dequeue: v"+dequeue);
		System.out.println();
		System.out.println("------------------------------------------------------------------------------------------------------------------------------");
		count++;
		
	}

		
	}


